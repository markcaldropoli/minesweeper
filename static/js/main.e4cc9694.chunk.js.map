{"version":3,"sources":["index.js"],"names":["Square","props","className","value","id","num","onClick","onContextMenu","Board","i","this","squares","rows","Array","from","keys","forEach","_item","index","row","n","item","push","renderSquare","map","React","Component","Game","state","history","fill","mines","minesInProximity","stepNumber","isFirstClick","isFirstRender","flagsRemaining","length","rand","Math","floor","random","includes","count","above","below","leftEdge","rightEdge","slice","x","setState","concat","numFlags","step","status","current","winner","calculateWinner","moves","_step","move","desc","jumpTo","handleClick","handleRightClick","ReactDOM","render","document","getElementById","addEventListener","event","preventDefault"],"mappings":"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","file":"static/js/main.e4cc9694.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props)\r\n{\r\n    var className = props.value === null ? \"square\" : \"clicked\";\r\n    \r\n    return (\r\n        <button id={props.num} className={className} onClick={props.onClick} onContextMenu={props.onContextMenu}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component\r\n{\r\n    renderSquare(i)\r\n    {\r\n        return (\r\n            <Square\r\n                key={i} // Keeps track of array index for mapping\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n                onContextMenu={() => this.props.onContextMenu(i)}\r\n                num={i}\r\n            />\r\n        );\r\n    }\r\n  \r\n    render()\r\n    {\r\n        let rows = [];\r\n        // Generate index for rows 0 - 15\r\n        let rowNums = Array.from(Array(16).keys());\r\n\r\n        rowNums.forEach((_item,index) => {\r\n            let row = [];\r\n            // Generate numbers for each square in the row (30 squares, 0 - 29, offset by row index * 30)\r\n            let nums = Array.from(Array(30).keys(), n => n + (index * 30));\r\n\r\n            // Generate squares for the row\r\n            nums.forEach((item) => {\r\n                row.push(this.renderSquare(item));\r\n            });\r\n\r\n            rows.push(row);\r\n        });\r\n\r\n        // Map rows to board-row divs to create the board\r\n        return (<div>{rows.map((row,index) => <div key={index} className=\"board-row\">{row}</div>)}</div>)\r\n    }\r\n}\r\n\r\nclass Game extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            history:\r\n            [\r\n                {\r\n                    squares: Array(480).fill(null),\r\n                }\r\n            ],\r\n            mines: Array(480).fill(null),\r\n            minesInProximity: Array(480).fill(null),\r\n            stepNumber: 0,\r\n            isFirstClick: true,\r\n            isFirstRender: true,\r\n            flagsRemaining: 99\r\n        };\r\n\r\n        // Generate mine locations\r\n        var mines = [];\r\n\r\n        while (mines.length !== 99)\r\n        {\r\n            const rand = Math.floor(Math.random() * 479);\r\n\r\n            if (!mines.includes(rand))\r\n            {\r\n                mines.push(rand);\r\n            }\r\n        }\r\n\r\n        // Place mines\r\n        for (let i = 0; i < mines.length; i++)\r\n        {\r\n            this.state.mines[mines[i]] = \"ðŸ’£\";\r\n        }\r\n\r\n        // Determine mines in proximity\r\n        for (let i = 0; i < this.state.history[0].squares.length; i++)\r\n        {\r\n            // Skip if mine\r\n            if (this.state.mines[i] === \"ðŸ’£\") continue;\r\n\r\n            var count = 0;\r\n            var above = i - 30;\r\n            var below = i + 30;\r\n            var leftEdge = i % 30 === 0 ? true : false;\r\n            var rightEdge = i % 30 === 29 ? true : false;\r\n\r\n            // Check cells above\r\n            if (above > 0)\r\n            {\r\n                if (!leftEdge && this.state.mines[above-1] === \"ðŸ’£\") count++;\r\n                if (this.state.mines[above] === \"ðŸ’£\") count++;\r\n                if (!rightEdge && this.state.mines[above+1] === \"ðŸ’£\") count++;\r\n            }\r\n\r\n            // Check cells on side\r\n            if (!leftEdge && this.state.mines[i-1] === \"ðŸ’£\") count++;\r\n            if (!rightEdge && this.state.mines[i+1] === \"ðŸ’£\") count++;\r\n\r\n            // Check cells below\r\n            if (below < 479)\r\n            {\r\n                if (!leftEdge && this.state.mines[below-1] === \"ðŸ’£\") count++;\r\n                if (this.state.mines[below] === \"ðŸ’£\") count++;\r\n                if (!rightEdge && this.state.mines[below+1] === \"ðŸ’£\") count++;\r\n            }\r\n\r\n            if (count !== 0) this.state.minesInProximity[i] = count;\r\n            else this.state.minesInProximity[i] = \"\";\r\n        }\r\n    }\r\n\r\n    handleClick(i)\r\n    {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        // Skip if square clicked was already clicked\r\n        if (this.state.minesInProximity[i] !== null && squares[i] === this.state.minesInProximity[i]) return;\r\n\r\n        // If ðŸ’£, the player lost, else display mines in proximity\r\n        if (this.state.mines[i] === \"ðŸ’£\")\r\n        {\r\n            // Display all mines on board\r\n            for (let x = 0; x < this.state.mines.length; x++)\r\n            {\r\n                if (this.state.mines[x] !== null)\r\n                {\r\n                    squares[x] = this.state.mines[x];\r\n                }\r\n            }\r\n\r\n            // Display all proximity to mines on board\r\n            for (let x = 0; x < this.state.minesInProximity.length; x++)\r\n            {\r\n                if (this.state.minesInProximity[x] !== null)\r\n                {\r\n                    squares[x] = this.state.minesInProximity[x];\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // No ðŸ’£, display mines in proximity of clicked square\r\n            squares[i] = this.state.minesInProximity[i];\r\n        }\r\n\r\n        this.setState({ \r\n            history: history.concat([\r\n                { \r\n                    squares: squares\r\n                }\r\n            ]),\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n\r\n    handleRightClick(i)\r\n    {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        let item = squares[i];\r\n        let numFlags = this.state.flagsRemaining;\r\n\r\n        if (squares[i] === \"ðŸš©\")\r\n        {\r\n            numFlags += 1;\r\n            item = null;\r\n        }\r\n        else if(squares[i] === null)\r\n        {\r\n            numFlags -= 1;\r\n            item = \"ðŸš©\";\r\n        }\r\n\r\n        squares[i] = item;\r\n\r\n        this.setState({\r\n            flagsRemaining: numFlags,\r\n            history: history.concat([\r\n                { \r\n                    squares: squares\r\n                }\r\n            ]),\r\n            stepNumber: history.length\r\n        });\r\n    }\r\n\r\n    jumpTo(step)\r\n    {\r\n        this.setState({\r\n            stepNumber: step\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(this.state.flagsRemaining,current.squares.slice());\r\n\r\n        const moves = history.map((_step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to game start';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status = 'Select a square!';\r\n\r\n        status = winner === \"Win\" ? 'Amazing, you win!' : winner === \"Loss\" ? 'Better luck next game!' : 'Select a square!'\r\n\r\n        return (\r\n        <div>\r\n            <h1>Minesweeper</h1>\r\n            <h2>Flags Remaining: {this.state.flagsRemaining}/99</h2>\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        onContextMenu={(i) => this.handleRightClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n// ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root'),\r\n    // Add context menu listener to prevent menu opening when player right clicks\r\n    document.addEventListener(\"contextmenu\", (event) => {\r\n        event.preventDefault();\r\n      })\r\n);\r\n\r\nfunction calculateWinner(flagsRemaining, squares)\r\n{\r\n    for (let i = 0; i < squares.length; i++)\r\n    {\r\n        if (squares[i] === \"ðŸ’£\") return \"Loss\";\r\n    }\r\n\r\n    return flagsRemaining !== 0 ? \"In-Progress\" : \"Win\";\r\n}"],"sourceRoot":""}